// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

[assembly:InternalsVisibleTo("LibuvSharp")]

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

public unsafe partial class FILETIME
{
    [StructLayout(LayoutKind.Sequential, Size = 8)]
    public partial struct __Internal
    {
        internal uint dwLowDateTime;
        internal uint dwHighDateTime;
    }
}

public unsafe partial struct LARGE_INTEGER
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        internal global::LARGE_INTEGER._0.__Internal _0;

        [FieldOffset(0)]
        internal global::LARGE_INTEGER.U.__Internal u;

        [FieldOffset(0)]
        internal long QuadPart;
    }

    public unsafe partial class _0
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint LowPart;
            internal int HighPart;
        }
    }

    public unsafe partial class U
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal uint LowPart;
            internal int HighPart;
        }
    }
    
}

public unsafe partial class GUID
{
    [StructLayout(LayoutKind.Sequential, Size = 16)]
    public partial struct __Internal
    {
        internal uint Data1;
        internal ushort Data2;
        internal ushort Data3;
        internal fixed byte Data4[8];
    }
}

public unsafe partial class SID_IDENTIFIER_AUTHORITY
{
    [StructLayout(LayoutKind.Sequential, Size = 6)]
    public partial struct __Internal
    {
        internal fixed byte Value[6];
    }
}

public unsafe partial class SID
{
    [StructLayout(LayoutKind.Sequential, Size = 12)]
    public partial struct __Internal
    {
        internal byte Revision;
        internal byte SubAuthorityCount;
        internal global::SID_IDENTIFIER_AUTHORITY.__Internal IdentifierAuthority;
        internal fixed uint SubAuthority[1];
    }
}

public unsafe partial class FILE_ID_128
{
    [StructLayout(LayoutKind.Sequential, Size = 16)]
    public partial struct __Internal
    {
        internal fixed byte Identifier[16];
    }
}

public unsafe partial class RTL_CRITICAL_SECTION
{
    [StructLayout(LayoutKind.Sequential, Size = 40, Pack = 8)]
    public partial struct __Internal
    {
        internal __IntPtr DebugInfo;
        internal int LockCount;
        internal int RecursionCount;
        internal __IntPtr OwningThread;
        internal __IntPtr LockSemaphore;
        internal ulong SpinCount;
    }
}

public unsafe partial class RTL_SRWLOCK
{
    [StructLayout(LayoutKind.Sequential, Size = 8)]
    public partial struct __Internal
    {
        internal __IntPtr Ptr;
    }
}

public unsafe partial class RTL_CONDITION_VARIABLE
{
    [StructLayout(LayoutKind.Sequential, Size = 8)]
    public partial struct __Internal
    {
        internal __IntPtr Ptr;
    }
}

public unsafe partial class OVERLAPPED
{
    [StructLayout(LayoutKind.Sequential, Size = 32)]
    public partial struct __Internal
    {
        internal ulong Internal;
        internal ulong InternalHigh;
        internal global::OVERLAPPED._0.__Internal _0;
        internal __IntPtr hEvent;
    }

    public unsafe partial struct _0
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::OVERLAPPED._0.__0.__Internal _0;

            [FieldOffset(0)]
            internal __IntPtr Pointer;
        }

        public unsafe partial class __0
        {
            [StructLayout(LayoutKind.Sequential, Size = 8)]
            public partial struct __Internal
            {
                internal uint Offset;
                internal uint OffsetHigh;
            }
        }
    }
}

public unsafe partial class SYSTEMTIME
{
    [StructLayout(LayoutKind.Sequential, Size = 16)]
    public partial struct __Internal
    {
        internal ushort wYear;
        internal ushort wMonth;
        internal ushort wDayOfWeek;
        internal ushort wDay;
        internal ushort wHour;
        internal ushort wMinute;
        internal ushort wSecond;
        internal ushort wMilliseconds;
    }
}

public unsafe partial class WIN32FIND_DATAW
{
    [StructLayout(LayoutKind.Sequential, Size = 592)]
    public partial struct __Internal
    {
        internal uint dwFileAttributes;
        internal global::FILETIME.__Internal ftCreationTime;
        internal global::FILETIME.__Internal ftLastAccessTime;
        internal global::FILETIME.__Internal ftLastWriteTime;
        internal uint nFileSizeHigh;
        internal uint nFileSizeLow;
        internal uint dwReserved0;
        internal uint dwReserved1;
        internal fixed char cFileName[260];
        internal fixed char cAlternateFileName[14];
    }
}

public unsafe partial class COORD
{
    [StructLayout(LayoutKind.Sequential, Size = 4)]
    public partial struct __Internal
    {
        internal short X;
        internal short Y;
    }
}

public unsafe partial class KEY_EVENT_RECORD
{
    [StructLayout(LayoutKind.Sequential, Size = 16)]
    public partial struct __Internal
    {
        internal int bKeyDown;
        internal ushort wRepeatCount;
        internal ushort wVirtualKeyCode;
        internal ushort wVirtualScanCode;
        internal global::KEY_EVENT_RECORD.UChar.__Internal uChar;
        internal uint dwControlKeyState;
    }

    public unsafe partial struct UChar
    {
        [StructLayout(LayoutKind.Explicit, Size = 2)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal char UnicodeChar;

            [FieldOffset(0)]
            internal sbyte AsciiChar;
        }
    }
}

public unsafe partial class MOUSE_EVENT_RECORD
{
    [StructLayout(LayoutKind.Sequential, Size = 16)]
    public partial struct __Internal
    {
        internal global::COORD.__Internal dwMousePosition;
        internal uint dwButtonState;
        internal uint dwControlKeyState;
        internal uint dwEventFlags;
    }
}

public unsafe partial class WINDOW_BUFFER_SIZE_RECORD
{
    [StructLayout(LayoutKind.Sequential, Size = 4)]
    public partial struct __Internal
    {
        internal global::COORD.__Internal dwSize;
    }
}

public unsafe partial class MENU_EVENT_RECORD
{
    [StructLayout(LayoutKind.Sequential, Size = 4)]
    public partial struct __Internal
    {
        internal uint dwCommandId;
    }
}

public unsafe partial class FOCUS_EVENT_RECORD
{
    [StructLayout(LayoutKind.Sequential, Size = 4)]
    public partial struct __Internal
    {
        internal int bSetFocus;
    }
}

public unsafe partial class INPUT_RECORD
{
    [StructLayout(LayoutKind.Sequential, Size = 20)]
    public partial struct __Internal
    {
        internal ushort EventType;
        internal global::INPUT_RECORD.Event.__Internal Event;
    }

    public unsafe partial struct Event
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::KEY_EVENT_RECORD.__Internal KeyEvent;

            [FieldOffset(0)]
            internal global::MOUSE_EVENT_RECORD.__Internal MouseEvent;

            [FieldOffset(0)]
            internal global::WINDOW_BUFFER_SIZE_RECORD.__Internal WindowBufferSizeEvent;

            [FieldOffset(0)]
            internal global::MENU_EVENT_RECORD.__Internal MenuEvent;

            [FieldOffset(0)]
            internal global::FOCUS_EVENT_RECORD.__Internal FocusEvent;
        }
    }
}

public enum TagCALLCONV
{
}

public unsafe partial class InAddr
{
    [StructLayout(LayoutKind.Sequential, Size = 4)]
    public partial struct __Internal
    {
        internal global::InAddr.S_un.__Internal S_un;
    }

    public unsafe partial struct S_un
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::InAddr.S_un.S_un_b.__Internal S_un_b;

            [FieldOffset(0)]
            internal global::InAddr.S_un.S_un_w.__Internal S_un_w;

            [FieldOffset(0)]
            internal uint S_addr;
        }

        public unsafe partial class S_un_b
        {
            [StructLayout(LayoutKind.Sequential, Size = 4)]
            public partial struct __Internal
            {
                internal byte s_b1;
                internal byte s_b2;
                internal byte s_b3;
                internal byte s_b4;
            }
        }

        public unsafe partial class S_un_w
        {
            [StructLayout(LayoutKind.Sequential, Size = 4)]
            public partial struct __Internal
            {
                internal ushort s_w1;
                internal ushort s_w2;
            }
        }
    }
}

public unsafe partial class SockaddrStorage
{
    [StructLayout(LayoutKind.Sequential, Size = 128)]
    public partial struct __Internal
    {
        internal ushort ss_family;
        internal fixed sbyte __ss_pad1[6];
        internal long __ss_align;
        internal fixed sbyte __ss_pad2[112];
    }
}

public unsafe partial class SCOPE_ID
{
    [StructLayout(LayoutKind.Sequential, Size = 4)]
    public partial struct __Internal
    {
        internal global::SCOPE_ID._0.__Internal _0;
    }

    public unsafe partial struct _0
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::SCOPE_ID._0.__0.__Internal _0;

            [FieldOffset(0)]
            internal uint Value;
        }

        public unsafe partial class __0
        {
            [StructLayout(LayoutKind.Sequential, Size = 4)]
            public partial struct __Internal
            {
                internal uint Zone;
                internal uint Level;
            }
        }
    }
}

public unsafe partial class SockaddrIn
{
    [StructLayout(LayoutKind.Sequential, Size = 16)]
    public partial struct __Internal
    {
        internal ushort sin_family;
        internal ushort sin_port;
        internal global::InAddr.__Internal sin_addr;
        internal fixed sbyte sin_zero[8];
    }
}

public unsafe partial class In6Addr
{
    [StructLayout(LayoutKind.Sequential, Size = 16)]
    public partial struct __Internal
    {
        internal global::In6Addr.U.__Internal u;
    }

    public unsafe partial struct U
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte Byte[16];

            [FieldOffset(0)]
            internal fixed ushort Word[8];
        }
    }
}

public unsafe partial class SockaddrIn6
{
    [StructLayout(LayoutKind.Sequential, Size = 28)]
    public partial struct __Internal
    {
        internal ushort sin6_family;
        internal ushort sin6_port;
        internal uint sin6_flowinfo;
        internal global::In6Addr.__Internal sin6_addr;
        internal global::SockaddrIn6._0.__Internal _0;
    }

    public unsafe partial struct _0
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint sin6_scope_id;

            [FieldOffset(0)]
            internal global::SCOPE_ID.__Internal sin6_scope_struct;
        }
    }
}
